<%= erb :_title_bar, locals: { title: @target.name } %>

<!--
TODO: Find a nice way to fit into design
<a href="/target/<%= @target.name %>/info">
    Info
</a>
-->

<div id="content">
    <div id="filter-view">
        <div id="filter-panel">
            <h2>Search</h2>
            <form method="GET">
                <div>
                    <label>
                        <b>Mnemonic:</b>
                        <input name="mnemonic" id="input-mnemonic-filter" oninput="refreshFilters()" onchange="refreshFilters()" />
                    </label>
                </div>

                <div>
                    <b>Memory:</b>
                    <label>
                        <input name="store" id="input-store-filter" type="checkbox" onchange="refreshFilters()" />
                        Store
                    </label>
                    <label>
                        <input name="load" id="input-load-filter" type="checkbox" onchange="refreshFilters()" />
                        Load
                    </label>
                </div>

                <div>
                    <br/>
                    <b>Operands:</b>
                    <table id="filter-operand-table">
                        <tr>
                            <td></td>
                            <td class="checkbox-cell"><b>Input</b></td>
                            <td class="checkbox-cell"><b>Output</b></td>
                        </tr>

                        <tr>
                            <td class="label-cell">
                                <i>
                                    <abbr title="Filter to instructions which do not have any input/output operands">None</abbr>
                                </i>
                            </td>
                            <td class="checkbox-cell">
                                <input id="input-operand-input-none-filter" type="checkbox" onchange="refreshFilters()" />
                            </td>
                            <td class="checkbox-cell">
                                <input id="input-operand-output-none-filter" type="checkbox" onchange="refreshFilters()" />
                            </td>
                        </tr>

                        <% @target.operand_type_families.each do |_, ty| %>
                            <tr>
                                <td class="label-cell">
                                    <mark style="<%= ty.colour.css_text_style %>">
                                        <%= ty.name %>
                                    </mark>
                                </td>
                                <td class="checkbox-cell">
                                    <input class="input-operand-input-filter" data-operand-name="<%= ty.name %>" type="checkbox" onchange="refreshFilters()" />
                                </td>
                                <td class="checkbox-cell">
                                    <input class="input-operand-output-filter" data-operand-name="<%= ty.name %>" type="checkbox" onchange="refreshFilters()" />
                                </td>
                            </tr>
                        <% end %>
                    </table>
                </div>
            </form>
        </div>

        <div id="filter-results">
            <div id="instruction-results">
            </div>
        </div>
    </div>
</div>

<script>

const instructions = [
    <% @instructions.each do |ins| %>
        {
            name: "<%= ins.name %>",
            assemblyFormat: "<%= ins.assembly_format %>",
            assemblyHtml: <%=
                ins.assembly_parts
                    .map do |type, param|
                        case type
                        when :text
                            param
                        when :operand
                            style = @target.operand_type_families[param.operand_type.family]&.colour&.css_text_style
                            "<mark style=\"#{style}\">#{param.name}</mark>"
                        else
                            raise 'unknown assembly part'
                        end
                    end
                    .join
                    .inspect
            %>,

            mayStore: <%= ins.may_store? %>,
            mayLoad: <%= ins.may_load? %>,

            <% %w[inputs outputs].each do |dir| %>
                <%= dir %>: [
                    <% ins.send(dir).each do |op| %>
                        {
                            name: "<%= op.name %>",
                            operandType: "<%= op.operand_type.friendly_name %>",
                            operandTypeFamily: "<%= op.operand_type.family %>",
                            operandTypeFamilyStyle: "<%= @target.operand_type_families[op.operand_type.family]&.colour&.css_text_style %>",
                        },
                    <% end %>
                ],
            <% end %>

            implicitInputs: <%= ins.implicitly_read_registers.map(&:name).map(&:to_s).inspect %>,
            implicitOutputs: <%= ins.implicitly_written_registers.map(&:name).map(&:to_s).inspect %>,
        },
    <% end %>
]

const mnemonicFilter = document.getElementById("input-mnemonic-filter");
const storeFilter = document.getElementById("input-store-filter");
const loadFilter = document.getElementById("input-load-filter");

const operandInputFilters = [...document.querySelectorAll(".input-operand-input-filter")];
const operandOutputFilters = [...document.querySelectorAll(".input-operand-output-filter")];

const operandNoInputsFilter = document.getElementById("input-operand-input-none-filter");
const operandNoOutputsFilter = document.getElementById("input-operand-output-none-filter");

const instructionResults = document.getElementById("instruction-results");

const resultLimit = 500;

function refreshFilters() {
    // Load filter values
    const storeFilterValue = storeFilter.checked;
    const loadFilterValue = loadFilter.checked;
    // TODO: actually use mnemonics, not this
    const mnemonicFilterValue = mnemonicFilter.value.trim();

    const operandInputFilterValues = operandInputFilters
        .filter(el => el.checked)
        .map(el => el.dataset.operandName);
    const operandOutputFilterValues = operandOutputFilters
        .filter(el => el.checked)
        .map(el => el.dataset.operandName);

    const operandNoInputsFilterValue = operandNoInputsFilter.checked;
    const operandNoOutputsFilterValue = operandNoOutputsFilter.checked;

    var includedResults = 0;
    var htmlString = "";
    for (var i = 0; i < instructions.length; i++) {
        const instruction = instructions[i];

        // Test against filters
        if (storeFilterValue && !instruction.mayStore)
            continue;
        if (loadFilterValue && !instruction.mayLoad)
            continue;
        if (mnemonicFilterValue && !instruction.assemblyFormat.includes(mnemonicFilterValue))
            continue;

        if (operandInputFilterValues.length > 0) {
            if (!operandInputFilterValues.every(o => instruction.inputs.map(i => i.operandTypeFamily).includes(o)))
                continue;
        }
        if (operandOutputFilterValues.length > 0) {
            if (!operandOutputFilterValues.every(o => instruction.outputs.map(i => i.operandTypeFamily).includes(o.operandTypeFamily)))
                continue;
        }

        if (operandNoInputsFilterValue && instruction.inputs.length > 0)
            continue;
        if (operandNoOutputsFilterValue && instruction.outputs.length > 0)
            continue;

        // This element has survived the filters!
        // Add to output HTML
        includedResults++;
        htmlString += `
            <div class="result-card">
                <div class="header">
                    <code class="assembly-format">${instruction.assemblyHtml}</code>
                    ${instruction.name}
                </div>
                <b>Inputs</b>
                <ul>
                    ${
                        instruction.inputs
                            .map(i => `<li><mark style="${i.operandTypeFamilyStyle}"><code>${i.name}</code></mark> - ${i.operandType}</li>`)
                            .join("")
                    }
                    ${
                        instruction.implicitInputs
                            .map(i => `<li>Implicit: <code>${i}</code></li>`)
                            .join("")
                    }
                    ${ instruction.mayLoad ? "<li>Loads memory</li>" : "" }
                </ul>
                <b>Outputs</b>
                <ul>
                    ${
                        instruction.outputs
                            .map(i => `<li><mark style="${i.operandTypeFamilyStyle}"><code>${i.name}</code></mark> - ${i.operandType}</li>`)
                            .join("")
                    }
                    ${
                        instruction.implicitOutputs
                            .map(i => `<li>Implicit: <code>${i}</code></li>`)
                            .join("")
                    }
                    ${ instruction.mayStore ? "<li>Stores memory</li>" : "" }
                </ul>
            </div>
        `;

        if (includedResults == resultLimit) {
            htmlString = `
                <div>
                    <b>Truncated to ${resultLimit} results</b> - apply some filters.
                </div>
            ` + htmlString;
            break;
        }
    }
    htmlString += "";

    instructionResults.innerHTML = htmlString;
}

refreshFilters();
</script>
