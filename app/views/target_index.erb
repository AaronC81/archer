<div id="content">
    <div id="filter-view">
        <div id="static-panel">
            <div id="title-bar">
                <a href="/" id="home-link">
                    <img src="/logo.svg" alt="Archer logo" />
                </a>

                <div>
                    <h1><%= @target.title %></h1>
                    <small>
                        <a href="info">Architecture Info</a>
                    </small>
                </div>

                <% if @target.assembly_variants.length > 1 %>
                    <select id="assembly-variant-selector" onchange="refreshFilters()">
                        <% @target.assembly_variants.each.with_index do |name, i| %>
                            <option value="<%= i %>"><%= name %></option>
                        <% end %>
                    </select>
                <% end %>
            </div>
            
            <div id="filter-panel">
                <div id="inner-filter-panel">
                    <h2>Search</h2>
                    <form method="GET">
                        <div>
                            <label>
                                <b>Mnemonic:</b>
                                <br>
                                <input name="mnemonic" id="input-mnemonic-filter" oninput="refreshFilters()" onchange="refreshFilters()" />
                            </label>
                        </div>
                        <br>

                        <div>
                            <b>Memory:</b>
                            <label>
                                <input name="store" id="input-store-filter" type="checkbox" onchange="refreshFilters()" />
                                Store
                            </label>
                            <label>
                                <input name="load" id="input-load-filter" type="checkbox" onchange="refreshFilters()" />
                                Load
                            </label>
                        </div>

                        <div>
                            <br/>
                            <b>Operands:</b>
                            <table class="filter-table">
                                <tr>
                                    <td></td>
                                    <td class="checkbox-cell"><b>Input</b></td>
                                    <td class="checkbox-cell"><b>Output</b></td>
                                </tr>

                                <tr>
                                    <td class="label-cell align-end">
                                        <i>
                                            <abbr title="Filter to instructions which do not have any input/output operands">None</abbr>
                                        </i>
                                    </td>
                                    <td class="checkbox-cell">
                                        <input id="input-operand-input-none-filter" type="checkbox" onchange="refreshFilters()" />
                                    </td>
                                    <td class="checkbox-cell">
                                        <input id="input-operand-output-none-filter" type="checkbox" onchange="refreshFilters()" />
                                    </td>
                                </tr>

                                <% @target.operand_type_families.each do |_, ty| %>
                                    <tr>
                                        <td class="label-cell align-end">
                                            <mark style="<%= ty.colour.css_text_style %>">
                                                <%= ty.name %>
                                            </mark>
                                        </td>
                                        <td class="checkbox-cell">
                                            <input class="input-operand-input-filter" data-operand-name="<%= ty.name %>" type="checkbox" onchange="refreshFilters()" />
                                        </td>
                                        <td class="checkbox-cell">
                                            <input class="input-operand-output-filter" data-operand-name="<%= ty.name %>" type="checkbox" onchange="refreshFilters()" />
                                        </td>
                                    </tr>
                                <% end %>
                            </table>
                        </div>

                        <div>
                            <br/>
                            <b>Capabilities:</b> <!-- LLVM calls them "Predicates", but that's a weird name for a user-facing filter -->

                            <button type="button" onclick="selectNoPredicates()">None</button>
                            <button type="button" onclick="selectAllPredicates()">All</button>

                            <table class="filter-table">
                                <tr>
                                    <td class="checkbox-cell">
                                        <input id="input-predicate-none-filter" type="checkbox" onchange="refreshFilters()" checked />
                                    </td>
                                    <td class="label-cell">
                                        <abbr title="Include instructions which require no additional processor capabilities">None</abbr>
                                    </td>
                                </tr>

                                <% @target.predicates.values.map(&:friendly_name).uniq.each do |pred| %>
                                    <tr>
                                        <td class="checkbox-cell">
                                            <input class="input-predicate-filter" data-predicate-name="<%= pred %>" type="checkbox" onchange="refreshFilters()" checked />
                                        </td>
                                        <td class="label-cell">
                                            <%= pred %>
                                        </td>
                                    </tr>
                                <% end %>
                            </table>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div id="filter-view-divider"></div>

        <div id="filter-results">
            <hr id="filter-results-divider" />
            <div id="instruction-results">
            </div>
        </div>
    </div>
</div>

<script>

const instructions = [
    <% @instructions.each do |ins| %>
        {
            name: "<%= ins.name %>",
            assemblyVariants: [
                <% @target.assembly_variants.length.times do |i| %>
                    {
                        format: <%= ins.assembly_format_for_variant(i).inspect %>,
                        html: <%=
                            ins.assembly_parts_for_variant(i)
                                .map do |type, param|
                                    case type
                                    when :text
                                        param
                                    when :operand
                                        style = @target.operand_type_families[param.operand_type.family]&.colour&.css_text_style
                                        "<mark style=\"#{style}\">#{param.name}</mark>"
                                    else
                                        raise 'unknown assembly part'
                                    end
                                end
                                .join
                                .inspect
                        %>,
                    },
                <% end %>
            ],

            mayStore: <%= ins.may_store? %>,
            mayLoad: <%= ins.may_load? %>,

            <% %w[inputs outputs].each do |dir| %>
                <%= dir %>: [
                    <% ins.send(dir).each do |op| %>
                        {
                            name: "<%= op.name %>",
                            operandType: "<%= op.operand_type.friendly_name %>",
                            operandTypeFamily: "<%= op.operand_type.family %>",
                            operandTypeFamilyStyle: "<%= @target.operand_type_families[op.operand_type.family]&.colour&.css_text_style %>",
                        },
                    <% end %>
                ],
            <% end %>

            implicitInputs: <%= ins.implicitly_read_registers.map(&:name).map(&:to_s).inspect %>,
            implicitOutputs: <%= ins.implicitly_written_registers.map(&:name).map(&:to_s).inspect %>,

            predicates: <%=
                ins.predicates
                    .map { |pred| @target.predicates[pred]&.friendly_name }
                    .compact
                    .uniq # Predicates are allowed to share friendly names
                    .inspect
            %>,

            documentation:
            <% if ins.documentation %>
                {
                    text: <%= ins.documentation.text.inspect %>,
                    url: <%= ins.documentation.url.inspect %>,
                }
            <% else %>
                undefined
            <% end %>,
        },
    <% end %>
]

const mnemonicFilter = document.getElementById("input-mnemonic-filter");
const storeFilter = document.getElementById("input-store-filter");
const loadFilter = document.getElementById("input-load-filter");

const operandInputFilters = [...document.querySelectorAll(".input-operand-input-filter")];
const operandOutputFilters = [...document.querySelectorAll(".input-operand-output-filter")];

const operandNoInputsFilter = document.getElementById("input-operand-input-none-filter");
const operandNoOutputsFilter = document.getElementById("input-operand-output-none-filter");

const predicateFilters = [...document.querySelectorAll(".input-predicate-filter")];
const predicateNoneFilter = document.getElementById("input-predicate-none-filter");

const instructionResults = document.getElementById("instruction-results");

const assemblyVariantSelector = document.getElementById("assembly-variant-selector");

const resultLimit = 500;

function selectNoPredicates() {
    // Deselect all additional predicates, but keep 'None' selected
    // (This is _probably_ the behaviour you're after...)
    predicateNoneFilter.checked = true;
    predicateFilters.forEach(el => el.checked = false);

    refreshFilters();
}

function selectAllPredicates() {
    // Select everything
    predicateNoneFilter.checked = true;
    predicateFilters.forEach(el => el.checked = true);

    refreshFilters();
}

function refreshFilters() {
    // Load filter values
    const storeFilterValue = storeFilter.checked;
    const loadFilterValue = loadFilter.checked;
    // TODO: actually use mnemonics, not this
    const mnemonicFilterValue = mnemonicFilter.value.trim();

    const operandInputFilterValues = operandInputFilters
        .filter(el => el.checked)
        .map(el => el.dataset.operandName);
    const operandOutputFilterValues = operandOutputFilters
        .filter(el => el.checked)
        .map(el => el.dataset.operandName);

    const operandNoInputsFilterValue = operandNoInputsFilter.checked;
    const operandNoOutputsFilterValue = operandNoOutputsFilter.checked;

    const satisfiedPredicates = predicateFilters
        .filter(el => el.checked)
        .map(el => el.dataset.predicateName);
    const predicateNoneFilterValue = predicateNoneFilter.checked;

    let assemblyVariant;
    if (assemblyVariantSelector) {
        assemblyVariant = parseInt(assemblyVariantSelector.value);
    } else {
        assemblyVariant = 0;
    }

    var includedResults = 0;
    var htmlString = "";
    for (var i = 0; i < instructions.length; i++) {
        const instruction = instructions[i];

        // Memory characteristic filters
        if (storeFilterValue && !instruction.mayStore)
            continue;
        if (loadFilterValue && !instruction.mayLoad)
            continue;

        // Textual filter
        if (mnemonicFilterValue && !instruction.assemblyVariants[assemblyVariant].format.includes(mnemonicFilterValue))
            continue;

        // Operand filters
        if (operandInputFilterValues.length > 0) {
            if (!operandInputFilterValues.every(o => instruction.inputs.map(i => i.operandTypeFamily).includes(o)))
                continue;
        }
        if (operandOutputFilterValues.length > 0) {
            if (!operandOutputFilterValues.every(o => instruction.outputs.map(i => i.operandTypeFamily).includes(o)))
                continue;
        }
        if (operandNoInputsFilterValue && instruction.inputs.length > 0)
            continue;
        if (operandNoOutputsFilterValue && instruction.outputs.length > 0)
            continue;

        // Predicate filters
        // Either one of the following must be true for the instruction to show up:
        //   (1) This instruction has no predicates, and the user has ticked "None", and 
        //   (2) This instruction has some predicates, and the user has ticked all of them
        if (instruction.predicates.length == 0) {
            // (1)
            if (!predicateNoneFilterValue)
                continue;
        } else {
            // (2)
            if (!instruction.predicates.every(p => satisfiedPredicates.includes(p)))
                continue;
        }

        // This element has survived the filters!
        // Add to output HTML
        includedResults++;
        htmlString += `
            <div class="result-card">
                <div class="header">
                    <code class="assembly-format">${instruction.assemblyVariants[assemblyVariant].html}</code>
                    ${instruction.name}
                </div>
                <table class="result-operand-table">
                    <tr>
                        <th colspan="2">Inputs</th>
                    <tr>
                    ${
                        instruction.inputs
                            .map(i => `
                                <tr>
                                    <td class="label-cell"><mark style="${i.operandTypeFamilyStyle}"><code>${i.name}</code></mark></td>
                                    <td>${i.operandType}</td>
                                </tr>`
                            )
                            .join("")
                    }
                    ${
                        instruction.implicitInputs
                            .map(i => `<tr><td class="label-cell">Implicit</td><td><code>${i}</code></td></tr>`)
                            .join("")
                    }
                    ${ instruction.mayLoad ? "<tr><td></td><td>Loads memory</td></tr>" : "" }

                    <tr>
                        <th colspan="2">Outputs</th>
                    <tr>
                    ${
                        instruction.outputs
                            .map(i => `
                                <tr>
                                    <td class="label-cell"><mark style="${i.operandTypeFamilyStyle}"><code>${i.name}</code></mark></td>
                                    <td>${i.operandType}</td>
                                </tr>`
                            )
                            .join("")
                    }
                    ${
                        instruction.implicitOutputs
                            .map(i => `<tr><td class="label-cell">Implicit</td><td><code>${i}</code></td></tr>`)
                            .join("")
                    }
                    ${ instruction.mayStore ? "<tr><td></td><td>Stores memory</td></tr>" : "" }
                </table>
                <div class="predicate-labels">
                    ${instruction.predicates.map(pred => `<span>${pred}</span>`).join("")}
                </div>
                ${
                    instruction.documentation
                        ? `<a href="${instruction.documentation.url}" target="_blank" style="display: inline-block; margin-top: 15px;">${ instruction.documentation.text }</a>`
                        : ''
                }
            </div>
        `;

        if (includedResults == resultLimit) {
            htmlString = `
                <div>
                    <b>Truncated to ${resultLimit} results</b> - apply some filters.
                </div>
            ` + htmlString;
            break;
        }
    }
    htmlString += "";

    instructionResults.innerHTML = htmlString;
}

refreshFilters();
</script>
