title: "ARM"
subtitle: "Extremely experimental, not useful yet"

operand_types:
  # General-purpose registers
  GPR:
    friendly_name: General-purpose register
    llvm_name: GPR
    family: General-purpose register
  GPRnoip:
    friendly_name: General-purpose register (except IP)
    llvm_name: GPRnoip
    family: General-purpose register
  GPRnopc:
    friendly_name: General-purpose register (except PC)
    llvm_name: GPRnopc
    family: General-purpose register
  rGPR:
    friendly_name: General-purpose register (except PC or SP)
    llvm_name: rGPR
    family: General-purpose register
  tGPR:
    friendly_name: General-purpose register (between r0-r7)
    llvm_name: tGPR
    family: General-purpose register
  hGPR:
    friendly_name: General-purpose register (between r8-r15)
    llvm_name: hGPR
    family: General-purpose register

  # Simple immediates
  "expand_immediates!": [
    "imm_3b", "imm_4b", "imm_6b", "imm_7b", "imm_9b", "imm_11b", "imm_12b", "imm_13b"
  ]

  # Other immediates
  mod_imm:
    friendly_name: Modified immediate (encoded as 12-bit, shifted to 32-bit)
    llvm_name: mod_imm
    family: Immediate
  imm0_7:
    friendly_name: Immediate (0-7)
    llvm_name: imm0_7
    family: Immediate
  imm0_15:
    friendly_name: Immediate (0-15)
    llvm_name: imm0_15
    family: Immediate
  imm0_31:
    friendly_name: Immediate (0-31)
    llvm_name: imm0_31
    family: Immediate
  p_imm:
    friendly_name: Immediate (coprocessor identifier, 0-7)
    llvm_name: p_imm
    family: Immediate

  # Memory
  addrmode_imm12:
    friendly_name: Address in general-purpose register with 12-bit immediate offset
    llvm_name: addrmode_imm12
    family: Memory
  addr_offset_none:
    friendly_name: Address in general-purpose register
    llvm_name: addr_offset_none
    family: Memory
  t_addr_offset_none:
    friendly_name: Address in general-purpose register (between r0-r7)
    llvm_name: t_addr_offset_none
    family: Memory
  # TODO: many more, pre/post index stuff

  # Vector/FP
  SPR:
    friendly_name: Single-precision float register
    llvm_name: SPR
    family: SIMD/float register
  DPR:
    friendly_name: 64-bit vector register (possibly as double-precision float)
    llvm_name: DPR
    family: SIMD/float register
  QPR:
    friendly_name: 128-bit vector register
    llvm_name: QPR
    family: SIMD/float register

  # Instruction modifiers
  # TODO: these form part of the mnemonic, so I'm not sure it's correct to treat them as operands
  # like this. But that is how LLVM models them.
  pred: # ARM calls them "condition codes", LLVM calls them "predicates"
    friendly_name: Condition code (optional)
    llvm_name: pred
    family: Condition instruction modifier
  cc_out:
    friendly_name: Set flags ("s" to update, omit to not update)
    llvm_name: cc_out
    family: Flag instruction modifier

instruction_fixups:
  - match: "t2CPS2p"
    drop: true
    desc: "Drop instructions which use operands in mnemonic"

explode_operand_types:
  - { llvm_name: addrmode_tbb, format: "" }
  - { llvm_name: addrmode_tbh, format: "" }

predicates:
  # Processor types
  - friendly_name: "ARM"
    llvm_name: IsARM
    important: true
  - friendly_name: "Thumb"
    llvm_name: IsThumb
    important: true
  - friendly_name: "Thumb-1 Only"
    llvm_name: IsThumb1Only
    important: true
  - friendly_name: "Thumb-2"
    llvm_name: IsThumb2
    important: true

  # Generations
  - friendly_name: v8
    llvm_name: HasV8
  # TODO: loads more but I think v8 is the most impactful one

  # Extensions
  - friendly_name: "NEON"
    llvm_name: HasNEON
  - friendly_name: "VFPv2"
    llvm_name: HasVFP2
  - friendly_name: "VFPv3"
    llvm_name: HasVFP3
  - friendly_name: "VFPv4"
    llvm_name: HasVFP4
  - friendly_name: "v8 base FP" # TODO: unsure what this is
    llvm_name: HasFPARMv8
  - friendly_name: "Double-precision VFP"
    llvm_name: HasDPVFP
